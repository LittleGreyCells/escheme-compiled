Apply Dispatch

Explicit Control Evaluator (ECE) -- eceval
Byte Code Evaluator (BCE) -- bceval

The heart of the ECE and BCE is a dispatcher which performs the function
application, whatever that entails. Two cases are easily understood -- primtives
and closures. However, there are a handful of callables handled not as primitives
but rather as complex tweakings of the evaluation state. This short
document will summarize the ECE and BCE apply handling for all callables:

Callables
- primitive object
- closure object
- apply object
- eval object
- call/cc object
- continuation object
- map object
- foreach object
- force object


I. Explicit Control Evaluator (ECE)

- primitive object
  1. fetch function from funtab and call it
  2. clear argstack
  3. restore cont from stack
  4. goto cont

- closure object
  1. create a new execution context
     a. env -- extend the env with closure's base environment
     b. unev -- assign unev with closure's code
  2. if unev is a code object, then
     a. pc -- set to 0
     b. goto EVAL_CODE
     c. calls bceval
  3. if unev is not a code object, then
     a. goto EVAL_SEQUENCE

- apply object
  1. val -- assign function arg to val
  2. grab list of arguments arg
  3. clear argstack
  4. argstack -- pushes new args onto argstack
  5. goto APPLY_DISPATCH

- eval object
  1. exp -- assign 1st argument to exp
  2. env -- assign optional 2nd arg to env
  3. clear argstack
  3. restore cont from stack
  4. goto EVAL_DISPATCH

- call/cc object
  1. val -- assign closure 1st argument to val
  2. clear argstack
  3. create continuation
  4. pushes continuation on to argstack
  5. goto APPLY_DISPATCH

- continuation object
  1. cache optional argument as ccresult
  2. clear argstack
  3. restore continuation from val
  4. val -- assign ccresult
  5. if a code object is on top of regstack, resume in bceval
     a. goto EVAL_RETURN
     b. restores execution context
     c. calls bceval 
  6. if code object is NOT on top of regstack, remain in eceval
     a. cont -- restore from intstack top
     b. goto cont

- map object
  perform map operations on arguments
  1. save argc on intstack
  2. save (nil . nil) on regstack
  3. goto EV_MAP_APPLY

- foreach object
  perform foreach operations on arguments
  1. save argc on intstack
  2. save nil on regstack
  3. goto EV_FOR_APPLY

- force object
  1. get promise argument
  2. clear argstack
  3. if promise is already forced, return cached value
     c. val -- set to cached value
     d. restore cont stack
     c. goto cont
  4. if promise NOT forced, force and return it
     a. save promise
     b. exp -- set to promise code
     c. cont -- set to EV_FORCE_VALUE
     d. goto EVAL_DISPATCH
     e. state EV_FORCE_VALUE continues...
        i. restore promise
	ii. clear promise code
	iii. set promise cached value (val)
	iv. restore cont from stack
	v. goto cont


II. Byte Code Evaluator (BCE)

- primitive object
  1. fetch function from funtab and call it
  2. clear argstack
  3. restore execution context from stack
  4. re-enter bceval

- closure object
  1. create a new execution context
     a. env -- extend the env with closure's base environment
     b. unev -- assign unev with closure's code
     c. pc -- set to zero
  2. re-enter bceval

- apply object
  1. val -- assign function arg to val
  2. grab list of arguments arg
  3. clear argstack
  4. argstack -- pushes new args onto argstack
  5. re-enter apply

- eval object
  1. exp -- assign 1st argument to exp
  2. env -- assign optional 2nd arg to env
  3. clear argstack
  4. if exp is code, remain in bceval
     a. unev -- assign unev with code
     b. pc -- set to zero
     c. re-enter bceval
  5. if exp is sexprs, return to eceval
     a. cont -- set to EVAL_RETURN
     b. next -- set to EVAL_DISPATCH
     c. return

- call/cc object
  1. val -- assign closure 1st argument to val
  2. clear argstack
  3. create continuation
  4. pushes continuation on to argstack
  5. re-enter apply

- continuation object
  1. cache optional argument as ccresult
  2. clear argstack
  3. restore continuation from val
  4. val -- assign ccresult
  5. if a code object is on top of regstack, remain in bceval
     a. restore execution context from stack
     b. re-enter bceval
  6. if code object is NOT on top of regstack, resume in eceval
     a. cont -- restore from intstack top
     b. next -- set to cont
     c. return

- map object
  perform map code object on arguments
  1. env -- remains the same
  2. unev -- set to map code
  3. pc -- set to 0
  4. re-enter bceval

- foreach object
  perform map code object on arguments
  1. env -- remains the same
  2. unev -- set to map code
  3. pc -- set to 0
  4. re-enter bceval

- force object
  1. get promise argument
  2. clear argstack
  3. if promise is already forced, return cached value
     c. val -- set to cached value
     d. restore execution context from stack
     c. re-enter bceval
  4. if promise NOT forced, force and return it
     a. save promise
     b. env -- remains the same
     c. unev -- set to force promise code
     d. pc -- set to 0
     e. save execution context
     f. unev -- set to promise
     g. pc -- set to 0
     h. re-enter bceval
