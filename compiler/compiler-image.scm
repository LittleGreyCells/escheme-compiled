(<code> #(19 0 20 1 33) (<sexpr> 2 0 #f 0 ec:compile-verbose ) ) 
(<code> #(25 0 1 1 1 20 2 33) (<sexpr> 3 1 (<code> #(19 0 29 30 20 0 14 47 0 0 51 1 14 51 2 14 46 3 56 4 18 5 33) (<sexpr> 6 0 ec:compile-verbose 0 display 0 newline 0 *standard-output* 0 flush-output 0 () ) ) 0 (x) 0 ec:trace ) ) 
(<code> #(19 0 20 1 33) (<sexpr> 2 0 caddr 0 ec:get-statements ) ) 
(<code> #(14 51 0 20 1 33) (<sexpr> 2 0 the-environment 0 ec:the-global-env ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 46 0 56 1) (<sexpr> 2 0 ec:the-global-env 0 eq? ) ) 0 (exp) 0 ec:global-env? ) ) 
(<code> #(25 0 1 2 1 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 1 51 1 29 30 20 0 19 2 32 26 0 14 47 0 1 51 3 41 0 9 14 5 14 5 14 47 1 0 47 0 0 45 4 45 5 51 6 12 15 51 7 12 15 56 8) (<sexpr> 9 0 (env) 0 null? 0 ec:the-global-env 0 car 0 val 0 return 0 ec:compile 0 ec:get-statements 0 assemble ) ) 0 (exp env) 0 compile ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 25 0 14 47 0 0 47 0 1 47 0 2 47 0 3 56 1 14 47 0 0 51 2 29 30 50 0 14 47 0 0 47 0 1 47 0 2 47 0 3 56 3 14 47 0 0 51 4 29 30 229 1 40 0 1 5 0 14 47 0 0 51 6 41 0 9 14 47 0 0 45 7 51 8 29 30 101 0 14 47 1 0 47 1 1 47 1 2 47 1 3 56 9 14 47 0 0 45 10 51 8 29 30 128 0 14 47 1 0 47 1 1 47 1 2 47 1 3 56 11 14 47 0 0 45 12 51 8 29 30 155 0 14 47 1 0 47 1 1 47 1 2 47 1 3 56 13 14 47 0 0 45 14 51 8 29 30 182 0 14 47 1 0 47 1 1 47 1 2 47 1 3 56 15 14 47 0 0 45 16 51 8 29 30 209 0 14 47 1 0 47 1 1 47 1 2 47 1 3 56 17 14 47 0 0 45 18 51 8 29 30 236 0 14 47 1 0 47 1 1 47 1 2 47 1 3 56 19 14 47 0 0 45 20 51 8 29 30 7 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 21 14 47 0 0 45 22 51 8 29 30 34 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 23 14 47 0 0 45 24 51 8 29 30 61 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 25 14 47 0 0 45 26 51 8 29 30 88 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 27 14 47 0 0 45 28 51 8 29 30 115 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 29 14 47 0 0 45 30 51 8 29 30 142 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 31 14 47 0 0 45 32 51 8 28 30 162 1 14 47 0 0 45 33 51 8 29 30 181 1 14 47 1 0 47 1 1 47 1 2 47 1 3 56 34 14 47 0 0 45 35 51 8 29 30 214 1 14 5 14 47 1 0 51 36 12 15 47 1 1 47 1 2 47 1 3 56 37 14 47 1 0 47 1 1 47 1 2 47 1 3 56 38 14 45 39 47 0 0 56 40) (<sexpr> 41 0 symbol? 0 ec:compile-symbol 0 atom? 0 ec:compile-atom 0 pair? 0 (x) 0 car 0 quote 0 eq? 0 ec:compile-quote 0 if 0 ec:compile-if 0 cond 0 ec:compile-cond 0 while 0 ec:compile-while 0 lambda 0 ec:compile-lambda 0 set! 0 ec:compile-set! 0 let 0 ec:compile-let 0 letrec 0 ec:compile-letrec 0 delay 0 ec:compile-delay 0 access 0 ec:compile-access 0 and 0 ec:compile-and 0 or 0 ec:compile-or 0 begin 0 sequence 0 ec:compile-seq 0 define 0 ec:transform-nested-defines 0 ec:compile-define 0 ec:compile-application 0 "unrecognized expression" 0 error ) ) 0 (exp env target linkage) 0 ec:compile ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 5 14 45 1 47 0 1 51 2 12 15 51 2 12 15 56 2) (<sexpr> 3 0 assign 0 const 0 list ) ) 0 (target arg) 0 ec:make-assign ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 47 0 1 51 1 12 15 56 1) (<sexpr> 2 0 gref 0 list ) ) 0 (target arg) 0 ec:make-gref ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 47 0 1 47 0 2 51 1 12 15 56 1) (<sexpr> 2 0 fref 0 list ) ) 0 (target depth index) 0 ec:make-fref ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 5 14 45 1 47 0 0 51 2 12 15 51 2 12 15 56 2) (<sexpr> 3 0 goto 0 label 0 list ) ) 0 (arg) 0 ec:make-goto ) ) 
(<code> #(25 0 1 0 0 20 2 33) (<sexpr> 3 1 (<code> #(18 0 33) (<sexpr> 1 0 ((goto (reg cont))) ) ) 0 () 0 ec:make-goto-cont ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 5 14 45 1 47 0 0 51 2 12 15 51 2 12 15 56 2) (<sexpr> 3 0 branch 0 label 0 list ) ) 0 (arg) 0 ec:make-branch ) ) 
(<code> #(25 0 1 0 0 20 2 33) (<sexpr> 3 1 (<code> #(18 0 33) (<sexpr> 1 0 ((branch (reg cont))) ) ) 0 () 0 ec:make-branch-cont ) ) 
(<code> #(25 0 1 0 0 20 2 33) (<sexpr> 3 1 (<code> #(18 0 33) (<sexpr> 1 0 ((test-false)) ) ) 0 () 0 ec:make-test-false ) ) 
(<code> #(25 0 1 0 0 20 2 33) (<sexpr> 3 1 (<code> #(18 0 33) (<sexpr> 1 0 ((test-true)) ) ) 0 () 0 ec:make-test-true ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 45 0 51 1 12 15 56 1) (<sexpr> 2 0 (reg val) 0 list ) ) 0 (test) 0 ec:make-test ) ) 
(<code> #(25 0 1 5 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 47 0 1 47 0 2 47 0 3 47 0 4 51 1 12 15 56 1) (<sexpr> 2 0 make-closure 0 list ) ) 0 (target code vars numv rest) 0 ec:make-closure ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 5 14 45 1 47 0 1 51 2 12 15 5 14 45 3 47 0 2 51 2 12 15 51 2 12 15 56 2) (<sexpr> 4 0 get-access 0 const 0 list 0 reg ) ) 0 (target sym env) 0 ec:make-get-access ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 51 1 12 15 56 1) (<sexpr> 2 0 gset 0 list ) ) 0 (sym) 0 ec:make-gset ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 47 0 1 51 1 12 15 56 1) (<sexpr> 2 0 fset 0 list ) ) 0 (depth index) 0 ec:make-fset ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 5 14 45 1 47 0 1 51 2 12 15 45 3 5 14 45 4 47 0 2 51 2 12 15 51 2 12 15 56 2) (<sexpr> 5 0 set-access 0 const 0 list 0 (reg val) 0 reg ) ) 0 (target sym env) 0 ec:make-set-access ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 51 1 12 15 56 1) (<sexpr> 2 0 save 0 list ) ) 0 (reg) 0 ec:make-save ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 51 1 12 15 56 1) (<sexpr> 2 0 restore 0 list ) ) 0 (reg) 0 ec:make-restore ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 47 0 1 47 0 2 51 1 12 15 56 1) (<sexpr> 2 0 extend-env 0 list ) ) 0 (reg nvars vars) 0 ec:make-extend-env ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 51 1 12 15 56 1) (<sexpr> 2 0 eset 0 list ) ) 0 (index) 0 ec:make-eset ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 45 0 47 0 0 51 1 12 15 56 1) (<sexpr> 2 0 delay 0 list ) ) 0 (code) 0 ec:make-delay ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 3 5 14 45 0 5 14 47 0 2 51 1 12 15 5 14 47 0 2 47 0 0 51 2 12 15 51 3 12 15 56 4) (<sexpr> 5 0 () 0 list 0 ec:make-assign 0 ec:make-ins-sequence 0 ec:end-with-linkage ) ) 0 (exp env target linkage) 0 ec:compile-atom ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 3 5 14 45 0 5 14 47 0 2 51 1 12 15 5 14 47 0 2 5 14 47 0 0 51 2 12 15 51 3 12 15 51 4 12 15 56 5) (<sexpr> 6 0 () 0 list 0 cadr 0 ec:make-assign 0 ec:make-ins-sequence 0 ec:end-with-linkage ) ) 0 (exp env target linkage) 0 ec:compile-quote ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 1 51 0 29 30 13 0 18 1 33 40 0 3 2 0 14 47 0 1 51 3 41 0 18 4 41 1 18 1 41 2 9 14 47 0 2 51 5 29 30 48 0 21 0 0 29 30 107 0 14 47 1 0 5 14 47 0 0 51 6 12 15 51 7 29 30 86 0 14 47 1 2 47 0 1 51 8 22 0 2 32 104 0 14 47 0 1 51 9 22 0 1 14 47 0 0 51 10 22 0 0 32 35 0 14 47 0 2 51 5 29 30 141 0 14 47 1 0 5 14 47 1 1 51 11 12 15 5 14 47 1 2 51 9 12 15 56 12 21 0 2 33) (<sexpr> 13 0 ec:global-env? 0 () 0 (bindings index code) 0 environment-bindings 0 0 0 not 0 caar 0 eq? 0 cons 0 1+ 0 cdr 0 environment-parent 0 ec:lookup-symbol ) ) 0 (sym env depth) 0 ec:lookup-symbol ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 47 0 1 45 1 51 2 41 0 9 14 47 0 0 51 3 29 30 64 0 14 47 1 3 5 14 45 4 5 14 47 1 2 51 5 12 15 5 14 47 1 2 47 1 0 51 6 12 15 51 7 12 15 56 8 40 0 2 9 0 14 47 0 0 51 10 41 0 14 47 0 0 51 11 41 1 9 14 47 2 3 5 14 45 4 5 14 47 2 2 51 5 12 15 5 14 47 2 2 47 0 0 47 0 1 51 12 12 15 51 7 12 15 56 8) (<sexpr> 13 0 (result) 0 0 0 ec:lookup-symbol 0 null? 0 () 0 list 0 ec:make-gref 0 ec:make-ins-sequence 0 ec:end-with-linkage 0 (depth index) 0 car 0 cdr 0 ec:make-fref ) ) 0 (exp env target linkage) 0 ec:compile-symbol ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 56 0) (<sexpr> 1 0 ec:new-label-number ) ) 0 (x) 0 ec:make-label2 ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 3 0 0 14 45 1 51 2 41 0 14 45 3 51 2 41 1 14 45 4 51 2 41 2 9 40 0 3 5 0 14 5 14 47 1 0 51 6 12 15 47 1 1 45 7 45 8 51 9 41 0 14 5 14 47 1 0 51 10 12 15 47 1 1 47 1 2 5 14 45 8 47 1 3 51 11 29 30 88 0 21 0 2 32 91 0 21 1 3 12 15 51 9 41 1 14 5 14 47 1 0 51 12 12 15 47 1 1 47 1 2 47 1 3 51 9 41 2 9 14 47 0 0 5 14 5 14 45 13 45 14 5 14 5 14 51 15 12 15 5 14 47 1 1 51 16 12 15 51 17 12 15 51 18 12 15 5 14 5 14 47 1 0 47 0 1 51 19 12 15 5 14 47 1 1 47 0 2 51 19 12 15 51 20 12 15 47 1 2 51 19 12 15 56 19) (<sexpr> 21 0 (true-label false-label end-label) 0 true-branch 0 ec:make-label2 0 false-branch 0 end-branch 0 (condition then-part else-part) 0 cadr 0 val 0 next 0 ec:compile 0 caddr 0 eq? 0 cadddr 0 (val) 0 () 0 ec:make-test-false 0 ec:make-branch 0 append 0 ec:make-ins-sequence 0 ec:append-ins-sequences 0 ec:parallel-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-if ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 45 1 51 2 41 0 9 40 0 1 3 0 14 5 14 47 1 0 51 4 12 15 47 1 1 47 1 2 47 1 3 47 0 0 51 5 41 0 9 14 47 0 0 51 6 29 30 63 0 14 47 2 3 46 7 56 8 14 47 0 0 5 14 47 2 3 45 9 51 10 29 30 86 0 21 1 0 32 88 0 19 7 12 15 56 11) (<sexpr> 12 0 (end-label) 0 end-branch 0 ec:make-label2 0 (<clauses>) 0 cdr 0 ec:compile-cond-clauses 0 null? 0 nil 0 ec:end-with-linkage 0 next 0 eq? 0 ec:append-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-cond ) ) 
(<code> #(25 0 1 5 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 19 1 33 14 5 14 5 14 47 0 0 51 2 12 15 47 0 1 47 0 2 47 0 3 47 0 4 5 14 47 0 0 51 3 12 15 51 4 12 15 5 14 5 14 47 0 0 51 5 12 15 47 0 1 47 0 2 47 0 3 47 0 4 51 6 12 15 56 7) (<sexpr> 8 0 null? 0 nil 0 car 0 ec:last-exp? 0 ec:compile-cond-clause 0 cdr 0 ec:compile-cond-clauses 0 ec:append-ins-sequences ) ) 0 (exp env target linkage end-label) 0 ec:compile-cond-clauses ) ) 
(<code> #(25 0 1 6 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 45 1 51 2 29 30 39 0 14 5 14 47 0 0 51 3 12 15 47 0 1 47 0 2 47 0 3 56 4 40 0 3 5 0 14 5 14 47 0 0 51 0 12 15 47 0 1 45 6 45 7 51 8 41 0 14 5 14 47 0 0 51 3 12 15 47 0 1 45 6 47 0 3 51 4 41 1 14 45 9 51 10 41 2 9 14 47 0 0 5 14 45 11 45 12 5 14 5 14 51 13 12 15 5 21 1 5 29 30 129 0 14 47 1 3 45 14 51 2 29 30 139 0 14 51 15 32 145 0 14 47 0 2 51 16 12 15 51 17 12 15 51 18 12 15 47 0 1 5 14 47 1 3 45 7 51 2 29 30 202 0 21 1 5 29 30 183 0 19 19 32 204 0 14 45 12 45 12 5 14 47 1 4 51 20 12 15 51 18 32 204 0 18 12 12 15 47 0 2 56 21) (<sexpr> 22 0 car 0 else 0 eq? 0 cdr 0 ec:compile-list 0 (<test> <body> false-label) 0 val 0 next 0 ec:compile 0 false-branch 0 ec:make-label2 0 (val) 0 () 0 ec:make-test-false 0 return 0 ec:make-branch-cont 0 ec:make-branch 0 append 0 ec:make-ins-sequence 0 nil 0 ec:make-goto 0 ec:append-ins-sequences ) ) 0 (exp env target linkage end-label last) 0 ec:compile-cond-clause ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 2 0 0 14 45 1 51 2 41 0 14 45 3 51 2 41 1 9 40 0 2 4 0 14 5 14 47 1 0 51 5 12 15 47 1 1 45 6 45 7 51 8 41 0 14 5 14 47 1 0 51 9 12 15 47 1 1 47 1 2 45 7 51 10 41 1 9 14 47 1 0 47 0 0 5 14 45 11 45 12 5 14 5 14 51 13 12 15 5 14 47 2 3 45 14 51 15 29 30 109 0 14 51 16 32 115 0 14 47 1 1 51 17 12 15 51 18 12 15 51 19 12 15 47 0 1 5 14 45 12 45 12 5 14 47 1 0 51 20 12 15 51 19 12 15 47 1 1 56 21) (<sexpr> 22 0 (cond-label end-label) 0 cond-branch 0 ec:make-label2 0 end-branch 0 (<condition> <body>) 0 cadr 0 val 0 next 0 ec:compile 0 cddr 0 ec:compile-list 0 (val) 0 () 0 ec:make-test-false 0 return 0 eq? 0 ec:make-branch-cont 0 ec:make-branch 0 append 0 ec:make-ins-sequence 0 ec:make-goto 0 ec:append-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-while ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 45 0 51 1 29 30 27 0 14 45 2 45 2 5 14 45 3 51 4 12 15 56 5 19 6 33) (<sexpr> 7 0 next 0 eq? 0 () 0 env 0 ec:make-save 0 ec:make-ins-sequence 0 nil ) ) 0 (linkage) 0 ec:save-lw-context ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 45 0 51 1 29 30 27 0 14 45 2 45 2 5 14 45 3 51 4 12 15 56 5 19 6 33) (<sexpr> 7 0 next 0 eq? 0 () 0 env 0 ec:make-restore 0 ec:make-ins-sequence 0 nil ) ) 0 (linkage) 0 ec:restore-lw-context ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 40 0 2 2 0 14 47 0 0 51 3 41 0 14 47 0 0 51 4 41 1 9 40 0 1 5 0 14 47 0 0 47 2 1 51 6 41 0 9 40 0 2 7 0 14 47 2 0 47 3 1 45 8 51 9 41 0 14 5 14 47 3 0 51 10 12 15 47 0 0 47 3 2 47 3 3 51 11 41 1 9 14 5 14 47 4 3 51 12 12 15 5 14 45 13 45 14 5 14 45 15 47 2 1 47 2 0 51 16 12 15 51 17 12 15 5 14 45 14 45 14 5 14 45 15 51 18 12 15 51 17 12 15 47 0 0 5 14 45 14 45 19 5 14 45 20 51 21 12 15 51 17 12 15 47 0 1 5 14 47 4 3 51 22 12 15 56 23) (<sexpr> 24 0 (<bindings>) 0 cadr 0 (<vars> <nvars>) 0 ec:get-let-vars 0 length 0 (<xenv>) 0 ec:extend-env 0 (<esets> <body>) 0 0 0 ec:compile-let-bindings 0 cddr 0 ec:compile-list 0 ec:save-lw-context 0 (env) 0 () 0 val 0 ec:make-extend-env 0 ec:make-ins-sequence 0 ec:make-save 0 (env) 0 env 0 ec:make-restore 0 ec:restore-lw-context 0 ec:append-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-let ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 40 0 2 2 0 14 47 0 0 51 3 41 0 14 47 0 0 51 4 41 1 9 40 0 1 5 0 14 47 0 0 47 2 1 51 6 41 0 9 40 0 2 7 0 14 47 2 0 47 0 0 45 8 51 9 41 0 14 5 14 47 3 0 51 10 12 15 47 0 0 47 3 2 47 3 3 51 11 41 1 9 14 5 14 47 4 3 51 12 12 15 5 14 45 13 45 14 5 14 45 15 47 2 1 47 2 0 51 16 12 15 51 17 12 15 5 14 45 18 45 19 5 14 45 15 51 20 12 15 51 17 12 15 47 0 0 5 14 45 19 45 21 5 14 45 15 51 22 12 15 51 17 12 15 47 0 1 5 14 47 4 3 51 23 12 15 56 24) (<sexpr> 25 0 (<bindings>) 0 cadr 0 (<vars> <nvars>) 0 ec:get-let-vars 0 length 0 (<xenv>) 0 ec:extend-env 0 (<esets> <body>) 0 0 0 ec:compile-let-bindings 0 cddr 0 ec:compile-list 0 ec:save-lw-context 0 (env) 0 (env) 0 env 0 ec:make-extend-env 0 ec:make-ins-sequence 0 (env) 0 () 0 ec:make-save 0 (env) 0 ec:make-restore 0 ec:restore-lw-context 0 ec:append-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-letrec ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 19 1 33 40 0 1 2 0 14 47 0 0 51 3 41 0 9 14 47 0 0 51 4 29 30 64 0 14 5 14 47 0 0 51 3 12 15 5 14 5 14 47 1 0 51 5 12 15 51 6 12 15 56 7 14 47 0 0 5 14 5 14 47 1 0 51 5 12 15 51 6 12 15 56 7) (<sexpr> 8 0 null? 0 nil 0 (x) 0 car 0 pair? 0 cdr 0 ec:get-let-vars 0 cons ) ) 0 (<bindings>) 0 ec:get-let-vars ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 19 1 33 14 5 14 5 14 47 0 0 51 2 12 15 47 0 1 47 0 2 51 3 12 15 5 14 5 14 47 0 0 51 4 12 15 47 0 1 5 14 47 0 2 45 5 51 6 12 15 51 7 12 15 56 8) (<sexpr> 9 0 null? 0 nil 0 car 0 ec:compile-let-binding 0 cdr 0 1 0 + 0 ec:compile-let-bindings 0 ec:append-ins-sequences ) ) 0 (<bindings> env index) 0 ec:compile-let-bindings ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 2 0 0 14 47 0 0 51 1 29 30 37 0 14 5 14 47 0 0 51 2 12 15 47 0 1 45 3 45 4 51 5 32 49 0 14 45 6 47 0 1 45 3 45 4 51 5 41 0 14 45 7 45 6 5 14 47 0 2 51 8 12 15 51 9 41 1 9 14 47 0 0 47 0 1 56 10) (<sexpr> 11 0 (value-code set-code) 0 pair? 0 cadr 0 val 0 next 0 ec:compile 0 () 0 (env) 0 ec:make-eset 0 ec:make-ins-sequence 0 ec:append-ins-sequences ) ) 0 (x env index) 0 ec:compile-let-binding ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 5 14 47 0 0 51 1 12 15 47 0 1 47 0 2 45 2 51 3 41 0 9 14 47 1 3 5 14 45 4 45 5 5 14 5 14 47 0 0 51 6 12 15 51 7 12 15 51 8 12 15 56 9) (<sexpr> 10 0 (code) 0 cadr 0 return 0 ec:compile 0 (val) 0 () 0 ec:get-statements 0 ec:make-delay 0 ec:make-ins-sequence 0 ec:end-with-linkage ) ) 0 (exp env target linkage) 0 ec:compile-delay ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 24 0 14 45 1 5 14 47 0 1 51 2 12 15 56 3 14 47 0 0 51 4 29 30 57 0 14 45 5 5 14 5 14 47 0 0 47 0 1 51 6 12 15 51 2 12 15 56 3 14 47 0 0 51 7 29 30 97 0 14 5 14 47 0 0 51 8 12 15 5 14 5 14 47 0 0 51 9 12 15 47 0 1 51 6 12 15 56 10 14 45 11 47 0 0 47 0 1 56 12) (<sexpr> 13 0 null? 0 norm 0 reverse 0 list 0 symbol? 0 rest 0 cons 0 pair? 0 cdr 0 car 0 ec:get-arglist 0 "malformed formal argument list" 0 error ) ) 0 (args alist) 0 ec:get-arglist ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 14 47 0 0 46 2 56 3) (<sexpr> 4 0 (args) 0 cadr 0 nil 0 ec:get-arglist ) ) 0 (exp) 0 ec:cattrs ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 56 0) (<sexpr> 1 0 cadr ) ) 0 (cattrs) 0 ec:get-vars ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 cadr 0 length ) ) 0 (cattrs) 0 ec:get-numv ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 45 1 56 2) (<sexpr> 3 0 car 0 rest 0 eq? ) ) 0 (cattrs) 0 ec:get-rest ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 2 0 0 14 47 0 0 51 1 41 0 14 47 0 0 51 2 41 1 9 40 0 1 3 0 14 5 14 47 1 0 51 4 12 15 5 14 47 0 1 47 1 1 51 5 12 15 45 6 45 7 51 8 41 0 9 14 47 2 3 5 14 45 9 5 14 47 2 2 51 10 12 15 5 14 47 2 2 5 14 47 0 0 51 11 12 15 5 14 47 1 0 51 12 12 15 5 14 47 1 0 51 13 12 15 5 14 47 1 0 51 14 12 15 51 15 12 15 51 16 12 15 56 17) (<sexpr> 18 0 (proc args) 0 ec:cattrs 0 cadr 0 (code) 0 cddr 0 ec:extend-env 0 val 0 return 0 ec:compile-list 0 () 0 list 0 ec:get-statements 0 ec:get-vars 0 ec:get-numv 0 ec:get-rest 0 ec:make-closure 0 ec:make-ins-sequence 0 ec:end-with-linkage ) ) 0 (exp env target linkage) 0 ec:compile-lambda ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 14 47 0 0 51 2 29 30 97 0 40 0 1 3 0 14 5 14 47 1 0 51 4 12 15 47 1 1 45 5 45 6 51 7 41 0 9 14 47 2 3 5 14 47 0 0 5 14 45 8 5 14 47 2 2 51 9 12 15 5 14 47 2 2 47 1 0 45 5 51 10 12 15 51 11 12 15 51 12 12 15 56 13 14 45 14 47 1 0 56 15) (<sexpr> 16 0 (sym) 0 cadr 0 symbol? 0 (env-code) 0 caddr 0 val 0 next 0 ec:compile 0 (val) 0 list 0 ec:make-get-access 0 ec:make-ins-sequence 0 ec:append-ins-sequences 0 ec:end-with-linkage 0 "access expects a symbol" 0 error ) ) 0 (exp env target linkage) 0 ec:compile-access ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 51 1 29 30 24 0 14 45 2 47 0 0 56 3 21 0 0 33) (<sexpr> 4 0 symbol? 0 not 0 "expected symbol in access form" 0 error ) ) 0 (exp) 0 ec:compile-set-access-sym ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 47 0 1 47 0 2 47 0 3 56 0) (<sexpr> 1 0 ec:compile ) ) 0 (exp env target linkage) 0 ec:compile-set-access-env ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 14 47 0 0 51 2 29 30 181 0 40 0 2 3 0 14 5 14 47 1 0 51 4 12 15 47 1 1 45 5 45 6 51 7 41 0 14 47 0 0 47 1 1 45 8 51 9 41 1 9 14 47 0 1 51 10 29 30 115 0 14 47 2 3 5 14 47 0 0 5 14 45 11 5 14 47 2 2 51 12 12 15 5 14 47 1 0 51 13 12 15 51 14 12 15 51 15 12 15 56 16 40 0 2 17 0 14 47 0 1 51 18 41 0 14 47 0 1 51 19 41 1 9 14 47 3 3 5 14 47 1 0 5 14 45 20 5 14 47 3 2 51 12 12 15 5 14 47 0 0 47 0 1 51 21 12 15 51 14 12 15 51 15 12 15 56 16 14 47 0 0 51 22 29 30 205 0 14 5 14 47 0 0 51 18 12 15 45 23 51 24 29 30 94 1 40 0 3 25 0 14 47 0 0 51 1 41 0 14 5 14 47 0 0 51 4 12 15 47 1 1 45 5 45 6 51 7 41 1 14 5 14 47 1 0 51 4 12 15 47 1 1 45 5 45 6 51 7 41 2 9 14 47 2 3 5 14 47 0 1 5 14 5 14 5 14 45 26 45 27 45 28 51 14 12 15 47 0 2 5 14 45 27 45 29 45 30 51 14 12 15 51 15 12 15 5 14 45 31 5 14 47 2 2 51 12 12 15 5 14 47 2 2 47 0 0 45 32 51 33 12 15 51 14 12 15 51 15 12 15 51 15 12 15 56 16 14 45 34 47 1 0 56 35) (<sexpr> 36 0 (x) 0 cadr 0 symbol? 0 (value-code lookup-result) 0 caddr 0 val 0 next 0 ec:compile 0 0 0 ec:lookup-symbol 0 null? 0 (val) 0 list 0 ec:make-gset 0 ec:make-ins-sequence 0 ec:append-ins-sequences 0 ec:end-with-linkage 0 (depth index) 0 car 0 cdr 0 (val) 0 ec:make-fset 0 pair? 0 access 0 eq? 0 (sym env-code value-code) 0 (val) 0 () 0 ((save val)) 0 (exp) 0 ((restore exp)) 0 (val) 0 exp 0 ec:make-set-access 0 "illegal target for set!" 0 error ) ) 0 (exp env target linkage) 0 ec:compile-set! ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 51 1 29 30 24 0 14 45 2 47 0 0 56 3 21 0 0 33) (<sexpr> 4 0 symbol? 0 not 0 "expected symbol in define form" 0 error ) ) 0 (exp) 0 ec:defn-sym ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 2 0 0 14 5 14 47 0 0 51 1 12 15 51 2 41 0 14 5 14 47 0 0 51 3 12 15 47 0 1 45 4 45 5 51 6 41 1 9 14 47 1 3 5 14 47 0 1 5 14 45 7 5 14 47 1 2 51 8 12 15 5 14 47 0 0 51 9 12 15 51 10 12 15 51 11 12 15 56 12) (<sexpr> 13 0 (sym value-code) 0 cadr 0 ec:defn-sym 0 caddr 0 val 0 next 0 ec:compile 0 (val) 0 list 0 ec:make-gset 0 ec:make-ins-sequence 0 ec:append-ins-sequences 0 ec:end-with-linkage ) ) 0 (exp env target linkage) 0 ec:compile-define ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 2 0 0 14 5 14 47 0 0 51 1 12 15 47 0 1 45 2 45 3 51 4 41 0 14 25 5 6 1 0 15 5 14 47 0 0 51 7 12 15 51 8 41 1 9 14 5 14 45 9 45 10 45 11 51 12 12 15 5 14 45 13 5 14 47 0 1 51 14 12 15 5 14 45 15 47 0 0 5 14 47 1 2 47 1 3 51 16 12 15 51 17 12 15 51 17 12 15 56 18) (<sexpr> 19 0 (func-code args-code) 0 car 0 val 0 next 0 ec:compile 1 (<code> #(14 47 0 0 47 1 1 45 0 45 1 56 2) (<sexpr> 3 0 val 0 next 0 ec:compile ) ) 0 (arg) 0 cdr 0 map 0 () 0 (argc) 0 ((zero-argc)) 0 ec:make-ins-sequence 0 (val) 0 ec:pushargs 0 (argc) 0 ec:compile-fun-call 0 ec:preserve 0 ec:append-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-application ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 18 1 33 14 5 14 45 2 5 14 47 0 0 51 3 12 15 5 14 45 4 45 5 45 6 51 7 12 15 51 8 12 15 5 14 5 14 47 0 0 51 9 12 15 51 10 12 15 56 11) (<sexpr> 12 0 null? 0 () 0 (argc) 0 car 0 (val argc) 0 (argc) 0 ((push-arg (reg val))) 0 ec:make-ins-sequence 0 ec:preserve 0 cdr 0 ec:pushargs 0 ec:append-ins-sequences ) ) 0 (args-code) 0 ec:pushargs ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 45 0 45 1 5 14 47 0 0 45 2 51 3 29 30 32 0 14 5 14 47 0 1 45 4 51 3 12 15 51 5 29 30 70 0 14 47 0 1 45 6 51 3 29 30 53 0 18 7 32 67 0 14 45 8 5 14 47 0 1 51 9 12 15 51 10 32 116 0 14 47 0 0 45 2 51 3 29 30 90 0 14 47 0 1 45 4 51 3 29 30 99 0 18 11 32 116 0 14 45 12 5 14 47 0 0 47 0 1 51 13 12 15 51 14 12 15 56 15) (<sexpr> 16 0 (val argc) 0 (val env) 0 val 0 eq? 0 return 0 not 0 next 0 ((apply)) 0 ((apply)) 0 ec:make-goto 0 append 0 ((apply-cont)) 0 "unknown target and linkage combo" 0 cons 0 error 0 ec:make-ins-sequence ) ) 0 (target linkage) 0 ec:compile-fun-call ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 47 0 1 47 0 2 47 0 3 56 1) (<sexpr> 2 0 cdr 0 ec:compile-list ) ) 0 (exp env target linkage) 0 ec:compile-seq ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 28 30 16 0 14 47 0 0 51 1 29 30 41 0 14 5 14 47 0 0 51 2 12 15 47 0 1 47 0 2 47 0 3 56 3 14 5 14 5 14 47 0 0 51 2 12 15 47 0 1 47 0 2 45 4 51 3 12 15 5 14 5 14 47 0 0 51 5 12 15 47 0 1 47 0 2 47 0 3 51 6 12 15 56 7) (<sexpr> 8 0 null? 0 ec:last-exp? 0 car 0 ec:compile 0 next 0 cdr 0 ec:compile-list 0 ec:append-ins-sequences ) ) 0 (exp env target linkage) 0 ec:compile-list ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 47 0 1 45 0 47 0 2 47 0 3 56 1) (<sexpr> 2 0 test-false 0 ec:compile-and-or ) ) 0 (exp env target linkage) 0 ec:compile-and ) ) 
(<code> #(25 0 1 4 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 47 0 1 45 0 47 0 2 47 0 3 56 1) (<sexpr> 2 0 test-true 0 ec:compile-and-or ) ) 0 (exp env target linkage) 0 ec:compile-or ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 45 0 45 0 5 14 47 0 0 45 1 51 2 29 30 24 0 14 51 3 32 30 0 14 47 0 1 51 4 12 15 56 5) (<sexpr> 6 0 () 0 return 0 eq? 0 ec:make-branch-cont 0 ec:make-branch 0 ec:make-ins-sequence ) ) 0 (linkage label) 0 ec:make-and-or-branch-code ) ) 
(<code> #(25 0 1 5 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 45 1 51 2 41 0 9 40 0 1 3 0 14 47 1 4 47 0 0 51 4 41 0 9 14 47 2 4 5 14 5 14 5 14 47 2 0 51 5 12 15 47 2 1 47 2 2 47 0 0 47 2 3 47 2 4 51 6 12 15 5 14 47 2 4 45 7 51 8 29 30 84 0 18 9 32 110 0 14 5 14 47 2 0 51 10 12 15 45 11 51 12 29 30 107 0 18 9 32 110 0 21 1 0 12 15 51 13 12 15 56 14) (<sexpr> 15 0 (end-label) 0 end 0 ec:make-label2 0 (branch-code) 0 ec:make-and-or-branch-code 0 cdr 0 ec:compile-and-or-seq 0 return 0 eq? 0 () 0 length 0 2 0 <= 0 ec:append-ins-sequences 0 ec:end-with-linkage ) ) 0 (exp env test target linkage) 0 ec:compile-and-or ) ) 
(<code> #(25 0 1 6 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 28 30 16 0 14 47 0 0 51 1 29 30 40 0 14 5 14 47 0 0 51 2 12 15 47 0 1 47 0 4 45 3 56 4 14 5 14 5 14 47 0 0 51 2 12 15 47 0 1 47 0 4 45 3 51 4 12 15 5 14 5 14 45 5 45 6 5 14 47 0 2 51 7 12 15 51 8 12 15 47 0 3 5 14 5 14 47 0 0 51 9 12 15 47 0 1 47 0 2 47 0 3 47 0 4 47 0 5 51 10 12 15 51 11 12 15 56 11) (<sexpr> 12 0 null? 0 ec:last-exp? 0 car 0 next 0 ec:compile 0 (val) 0 () 0 ec:make-test 0 ec:make-ins-sequence 0 cdr 0 ec:compile-and-or-seq 0 ec:append-ins-sequences ) ) 0 (exp env test branch-code target linkage) 0 ec:compile-and-or-seq ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 45 0 51 1 29 30 25 0 14 45 2 45 2 5 14 51 3 12 15 56 4 14 47 0 0 45 5 51 1 29 30 40 0 14 56 6 14 45 2 45 2 5 14 47 0 0 51 7 12 15 56 4) (<sexpr> 8 0 return 0 eq? 0 () 0 ec:make-goto-cont 0 ec:make-ins-sequence 0 next 0 ec:empty-ins-sequence 0 ec:make-goto ) ) 0 (linkage) 0 ec:compile-linkage ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 1 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 ec:compile-linkage 0 ec:append-ins-sequences ) ) 0 (linkage ins-sequence) 0 ec:end-with-linkage ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 14 0 21 0 0 33 14 47 0 0 51 1 29 30 32 0 14 47 0 0 46 2 56 3 14 47 0 0 51 4 29 30 54 0 14 5 14 47 0 0 51 5 12 15 51 1 29 30 85 0 14 5 14 47 0 0 51 5 12 15 5 14 5 14 47 0 0 51 6 12 15 51 7 12 15 56 3 14 45 8 47 0 0 56 9) (<sexpr> 10 0 null? 0 symbol? 0 nil 0 cons 0 pair? 0 car 0 cdr 0 ec:normalize-arg-list 0 "badly formed arg-list tail" 0 error ) ) 0 (x) 0 ec:normalize-arg-list ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 18 1 33 14 5 14 5 14 47 0 0 51 2 12 15 46 3 51 4 12 15 5 14 5 14 47 0 0 51 5 12 15 51 6 12 15 56 4) (<sexpr> 7 0 null? 0 () 0 car 0 nil 0 cons 0 cdr 0 ec:make-empty-bindings ) ) 0 (arg-list) 0 ec:make-empty-bindings ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 14 5 14 47 0 0 51 2 12 15 47 1 1 56 3) (<sexpr> 4 0 (x) 0 ec:normalize-arg-list 0 ec:make-empty-bindings 0 %make-environment ) ) 0 (arg-list env) 0 ec:extend-env ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 cdr 0 null? ) ) 0 (exp) 0 ec:last-exp? ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 ec:cond-clauses 0 ec:expand-clauses ) ) 0 (exp) 0 ec:cond->if ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 19 1 33 40 0 2 2 0 14 47 0 0 51 3 41 0 14 47 0 0 51 4 41 1 9 14 47 0 0 51 5 29 30 75 0 14 47 0 1 51 0 29 30 67 0 14 5 14 47 0 0 51 6 12 15 56 7 14 45 8 47 1 0 56 9 14 5 14 47 0 0 51 10 12 15 5 14 5 14 47 0 0 51 6 12 15 51 7 12 15 5 14 47 0 1 51 11 12 15 56 12) (<sexpr> 13 0 null? 0 #f 0 (first rest) 0 ec:first-exp 0 ec:rest-exps 0 ec:cond-else-clause? 0 ec:cond-actions 0 ec:sequence->exp 0 "else clause isn't last -- cond->if" 0 error 0 ec:cond-predicate 0 ec:expand-clauses 0 ec:make-if ) ) 0 (clauses) 0 ec:expand-clauses ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 45 0 47 0 0 47 0 1 47 0 2 56 1) (<sexpr> 2 0 if 0 list ) ) 0 (predicate consequent alternative) 0 ec:make-if ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 56 0) (<sexpr> 1 0 cdr ) ) 0 (exp) 0 ec:cond-clauses ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 45 1 56 2) (<sexpr> 3 0 ec:cond-predicate 0 else 0 eq? ) ) 0 (clause) 0 ec:cond-else-clause? ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 56 0) (<sexpr> 1 0 car ) ) 0 (clause) 0 ec:cond-predicate ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 56 0) (<sexpr> 1 0 cdr ) ) 0 (clause) 0 ec:cond-actions ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 14 0 21 0 0 33 14 47 0 0 51 1 29 30 30 0 14 47 0 0 56 2 14 47 0 0 56 3) (<sexpr> 4 0 null? 0 ec:last-exp? 0 ec:first-exp 0 ec:make-begin ) ) 0 (exp) 0 ec:sequence->exp ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 45 0 47 0 0 56 1) (<sexpr> 2 0 begin 0 cons ) ) 0 (exp) 0 ec:make-begin ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 cdr 0 null? ) ) 0 (exp) 0 ec:last-exp? ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 56 0) (<sexpr> 1 0 car ) ) 0 (exp) 0 ec:first-exp ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 56 0) (<sexpr> 1 0 cdr ) ) 0 (exp) 0 ec:rest-exps ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 3 0 0 14 47 0 0 51 1 41 0 14 47 0 0 51 2 41 1 14 45 3 51 4 41 2 9 14 45 5 5 14 5 14 47 0 2 5 14 45 6 45 7 5 14 45 8 47 0 0 5 14 45 9 5 14 47 0 1 5 14 5 14 47 0 2 51 10 12 15 51 10 12 15 51 11 12 15 51 12 12 15 51 10 12 15 51 10 12 15 51 10 12 15 51 10 12 15 5 14 47 0 2 51 10 12 15 56 10) (<sexpr> 13 0 (<condition> <body> <while>) 0 cadr 0 cddr 0 %%w 0 ec:make-label 0 letrec 0 lambda 0 () 0 if 0 begin 0 list 0 append 0 cons ) ) 0 (exp) 0 ec:while->letrec ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 47 0 0 51 0 29 30 26 0 14 5 14 47 0 0 51 1 12 15 45 2 51 3 12 15 51 4 29 30 42 0 14 45 5 47 0 0 56 6 14 5 14 47 0 0 51 1 12 15 45 2 51 3 29 30 170 0 40 0 1 7 0 14 47 0 0 51 8 41 0 9 14 47 0 0 51 9 29 30 88 0 21 1 0 33 14 5 14 47 1 0 51 0 12 15 51 4 29 30 112 0 14 45 10 47 1 0 56 6 40 0 3 11 0 14 47 0 0 51 1 41 0 14 47 0 0 51 12 41 1 14 47 1 0 51 13 41 2 9 14 45 2 47 0 0 5 14 45 14 5 14 47 0 1 51 15 12 15 47 0 2 51 16 12 15 56 15 18 17 33) (<sexpr> 18 0 pair? 0 car 0 define 0 eq? 0 not 0 "not a define" 0 error 0 (x) 0 cadr 0 symbol? 0 "cannot normalze define" 0 (sym args body) 0 cdr 0 cddr 0 (lambda) 0 list 0 append 0 () ) ) 0 (d) 0 ec:normalize-define ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 2 0 0 18 1 41 0 18 1 41 1 9 21 1 0 29 30 110 0 2 40 0 1 2 0 14 47 1 0 51 3 41 0 9 14 47 0 0 51 4 29 30 60 0 14 5 14 47 0 0 51 3 12 15 45 5 51 6 29 30 85 0 14 5 14 47 0 0 51 7 12 15 47 1 0 51 8 22 1 0 32 97 0 14 47 0 0 47 1 1 51 8 22 1 1 14 47 2 0 51 9 22 2 0 9 32 14 0 14 47 0 0 47 0 1 56 8) (<sexpr> 10 0 (defines sexprs) 0 () 0 (x) 0 car 0 pair? 0 define 0 eq? 0 ec:transform-nested-defines 0 cons 0 cdr ) ) 0 (body) 0 ec:accumulate-defines ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 45 0 5 14 47 0 0 51 1 12 15 56 2) (<sexpr> 3 0 set! 0 cdr 0 cons ) ) 0 (d) 0 ec:makeset ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(40 0 1 0 0 14 47 0 0 51 1 41 0 9 14 5 14 5 14 47 0 0 51 2 12 15 51 3 12 15 51 4 29 30 40 0 21 0 0 33 40 0 2 5 0 14 47 0 0 51 6 41 0 14 47 0 0 51 2 41 1 9 40 0 1 7 0 14 47 0 1 51 8 41 0 9 40 0 1 9 0 14 47 0 0 51 10 41 0 9 14 5 14 47 0 0 51 11 12 15 51 12 29 30 110 0 21 3 0 33 40 0 4 13 0 14 46 6 5 14 47 0 0 51 11 12 15 51 14 41 0 14 46 15 5 14 47 0 0 51 11 12 15 51 14 41 1 14 5 14 47 0 0 51 16 12 15 51 17 41 2 14 47 2 1 51 6 41 3 9 14 45 18 5 14 47 3 0 5 14 5 14 45 19 5 14 47 0 3 5 14 5 14 45 20 5 14 47 0 0 51 21 12 15 47 0 1 47 0 2 51 22 12 15 46 23 51 24 12 15 51 24 12 15 51 24 12 15 46 23 51 24 12 15 51 24 12 15 56 24) (<sexpr> 25 0 (<nd>) 0 ec:normalize-define 0 caddr 0 pair? 0 not 0 (<name> <lambda>) 0 cadr 0 (<body>) 0 cddr 0 (pair) 0 ec:accumulate-defines 0 car 0 null? 0 (<vars> <sets> <sexprs> <params>) 0 map 0 ec:makeset 0 cdr 0 reverse 0 define 0 lambda 0 (let) 0 list 0 append 0 nil 0 cons ) ) 0 (d) 0 ec:transform-nested-defines ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 28 30 16 0 14 47 0 0 51 1 29 30 23 0 18 2 33 14 47 0 0 56 3) (<sexpr> 4 0 symbol? 0 number? 0 () 0 car ) ) 0 (s) 0 ec:registers-needed ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 28 30 16 0 14 47 0 0 51 1 29 30 23 0 18 2 33 14 47 0 0 56 3) (<sexpr> 4 0 symbol? 0 number? 0 () 0 cadr ) ) 0 (s) 0 ec:registers-modified ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 28 30 16 0 14 47 0 0 51 1 29 30 26 0 14 47 0 0 56 2 14 47 0 0 56 3) (<sexpr> 4 0 symbol? 0 number? 0 list 0 caddr ) ) 0 (s) 0 ec:statements ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 1 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 ec:registers-needed 0 memq ) ) 0 (seq reg) 0 ec:needs-register? ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 1 5 14 47 0 0 51 0 12 15 56 1) (<sexpr> 2 0 ec:registers-modified 0 memq ) ) 0 (seq reg) 0 ec:modifies-register? ) ) 
(<code> #(25 0 1 1 1 20 2 33) (<sexpr> 3 1 (<code> #(40 2 2 0 2 25 1 2 2 0 41 0 25 3 4 1 0 41 1 9 14 47 1 0 57 0 1) (<sexpr> 5 0 (append-2-sequences append-seq-list) 1 (<code> #(14 5 14 5 14 47 0 0 51 0 12 15 5 14 5 14 47 0 1 51 0 12 15 5 14 47 0 0 51 1 12 15 51 2 12 15 51 3 12 15 5 14 5 14 47 0 0 51 1 12 15 5 14 47 0 1 51 1 12 15 51 3 12 15 5 14 5 14 47 0 0 51 4 12 15 5 14 47 0 1 51 4 12 15 51 5 12 15 56 6) (<sexpr> 7 0 ec:registers-needed 0 ec:registers-modified 0 ec:list-difference 0 ec:list-union 0 ec:statements 0 append 0 ec:make-ins-sequence ) ) 0 (seq1 seq2) 1 (<code> #(14 47 0 0 51 0 29 30 13 0 14 56 1 14 5 14 47 0 0 51 2 12 15 5 14 5 14 47 0 0 51 3 12 15 52 1 1 12 15 57 1 0) (<sexpr> 4 0 null? 0 ec:empty-ins-sequence 0 car 0 cdr ) ) 0 (seqs) ) ) 0 (seqs) 0 ec:append-ins-sequences ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 14 0 21 0 1 33 14 5 14 47 0 0 51 1 12 15 47 0 1 51 2 29 30 48 0 14 5 14 47 0 0 51 3 12 15 47 0 1 56 4 14 5 14 47 0 0 51 1 12 15 5 14 5 14 47 0 0 51 3 12 15 47 0 1 51 4 12 15 56 5) (<sexpr> 6 0 null? 0 car 0 memq 0 cdr 0 ec:list-union 0 cons ) ) 0 (s1 s2) 0 ec:list-union ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 13 0 18 1 33 14 5 14 47 0 0 51 2 12 15 47 0 1 51 3 29 30 47 0 14 5 14 47 0 0 51 4 12 15 47 0 1 56 5 14 5 14 47 0 0 51 2 12 15 5 14 5 14 47 0 0 51 4 12 15 47 0 1 51 5 12 15 56 6) (<sexpr> 7 0 null? 0 () 0 car 0 memq 0 cdr 0 ec:list-difference 0 cons ) ) 0 (s1 s2) 0 ec:list-difference ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 51 0 29 30 19 0 14 47 0 1 47 0 2 56 1 40 0 1 2 0 14 47 0 0 51 3 41 0 9 14 47 1 2 47 0 0 51 4 29 30 55 0 14 47 1 1 47 0 0 51 5 29 30 161 0 14 5 14 47 1 0 51 6 12 15 5 14 5 14 5 14 47 0 0 51 7 12 15 5 14 47 1 1 51 8 12 15 51 9 12 15 5 14 5 14 47 1 1 51 10 12 15 5 14 47 0 0 51 7 12 15 51 11 12 15 5 14 5 14 47 0 0 51 12 12 15 5 14 47 1 1 51 13 12 15 5 14 47 0 0 51 14 12 15 51 15 12 15 51 16 12 15 47 1 2 56 17 14 5 14 47 1 0 51 6 12 15 47 1 1 47 1 2 56 17) (<sexpr> 18 0 null? 0 ec:append-ins-sequences 0 (first-reg) 0 car 0 ec:needs-register? 0 ec:modifies-register? 0 cdr 0 list 0 ec:registers-needed 0 ec:list-union 0 ec:registers-modified 0 ec:list-difference 0 ec:make-save 0 ec:statements 0 ec:make-restore 0 append 0 ec:make-ins-sequence 0 ec:preserve ) ) 0 (regs seq1 seq2) 0 ec:preserve ) ) 
(<code> #(25 0 1 2 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 5 14 47 0 0 51 0 12 15 5 14 47 0 1 51 0 12 15 51 1 12 15 5 14 5 14 47 0 0 51 2 12 15 5 14 47 0 1 51 2 12 15 51 1 12 15 5 14 5 14 47 0 0 51 3 12 15 5 14 47 0 1 51 3 12 15 51 4 12 15 56 5) (<sexpr> 6 0 ec:registers-needed 0 ec:list-union 0 ec:registers-modified 0 ec:statements 0 append 0 ec:make-ins-sequence ) ) 0 (seq1 seq2) 0 ec:parallel-ins-sequences ) ) 
(<code> #(25 0 1 3 0 20 2 33) (<sexpr> 3 1 (<code> #(14 47 0 0 47 0 1 47 0 2 56 0) (<sexpr> 1 0 list ) ) 0 (needs modifies statements) 0 ec:make-ins-sequence ) ) 
(<code> #(25 0 1 0 0 20 2 33) (<sexpr> 3 1 (<code> #(14 45 0 45 0 45 0 56 1) (<sexpr> 2 0 () 0 ec:make-ins-sequence ) ) 0 () 0 ec:empty-ins-sequence ) ) 
(<code> #(18 0 20 1 33) (<sexpr> 2 0 0 0 ec:label-counter ) ) 
(<code> #(25 0 1 0 0 20 2 33) (<sexpr> 3 1 (<code> #(14 46 0 45 1 51 2 20 0 19 0 33) (<sexpr> 3 0 ec:label-counter 0 1 0 + ) ) 0 () 0 ec:new-label-number ) ) 
(<code> #(25 0 1 1 0 20 2 33) (<sexpr> 3 1 (<code> #(14 5 14 5 14 47 0 0 51 0 12 15 5 14 5 14 51 1 12 15 51 2 12 15 51 3 12 15 56 4) (<sexpr> 5 0 symbol->string 0 ec:new-label-number 0 integer->string 0 string-append 0 string->symbol ) ) 0 (name) 0 ec:make-label ) ) 
