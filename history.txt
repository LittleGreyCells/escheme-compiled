(list* 1 2 3)
(list* 1 2 3 4 (quote (1 2)))
(load "tests/test_driver1.scm")
append
(append (quote (1)) (quote (2)) (quote (3)))
(append (quote (1)) (quote ()) (quote (3)))
(load "tests/test_driver1.scm")
list*
(list*)
(define list-star (lambda d (let ((f (lambda (d) (if (not (pair? d)) d (cons (car d) (f (cdr d))))))) (f d))))
(list-star)
(list-star 1)
(define list-star (lambda d (letrec ((f (lambda (d) (if (not (pair? d)) d (cons (car d) (f (cdr d))))))) (f d))))
(list-star)
(list-star 1)
(list-star 1 2)
(define list-star (lambda d (letrec ((f (lambda (d) (print d) (if (not (pair? d)) d (cons (car d) (f (cdr d))))))) (f d))))
(list-star)
(list-star 1 2)
(define list-star (lambda d (letrec ((f (lambda (d) (print d) (if (not (pair? d)) d (cons (car d) (f (cdr d))))))) (display "d: ") (print d) (f d))))
(list-star 1 2)
(define list-star (lambda d (letrec ((f (lambda (d) (if (<= (length d) 1) (car d) (cons (car d) (f (cdr d))))))) (display "d: ") (print d) (f d))))
(list-star)
(list-star 1)
(list-star 1 2)
(list-star 1 2 3)
(list-star 1 2 3 4)
(list-star 1 2 3 (quote (4 5 6)))
(define list-star (lambda d (letrec ((f (lambda (d) (if (= (length d) 1) (car d) (cons (car d) (f (cdr d))))))) (if (null? d) d (f d)))))
(list-star 1 2 3 (quote (4 5 6)))
(list-star 1 2 3 4)
(list-star 1 2)
(list-star)
(define caar (lambda (x) (car (car x))))
(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define cddr (lambda (x) (cdr (cdr x))))
(define x (quote (1 2 3 4)))
x
(caar x)
(cadr x)
(cddr x)
(define list* (lambda d (letrec ((f (lambda (d) (if (= (length d) 1) (car d) (cons (car d) (f (cdr d))))))) (if (null? d) d (f d)))))
(define caar (lambda (x) (car (car x))))
(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define cddr (lambda (x) (cdr (cdr x))))
(define caaar (lambda (x) (car (caar x))))
(define caadr (lambda (x) (car (cadr x))))
(define cadar (lambda (x) (car (cdar x))))
(define caddr (lambda (x) (car (cddr x))))
(define cdaar (lambda (x) (cdr (caar x))))
(define cdadr (lambda (x) (cdr (cadr x))))
(define cddar (lambda (x) (cdr (cdar x))))
(define cdddr (lambda (x) (cdr (cddr x))))
(load "tests/escheme_test_suite.scm")
(perform-timed-run n)
(define displayln (lambda (s) (display s) (newline)))
(define display-header (lambda (s n) (display s) (display " (") (display n) (display ") ") (newline)))
(define (test1 n) (display-header "test1" n) (if #t (begin (load "tests/escheme_test_suite.scm") (display "  suite1 ") (perform-timed-run n))) (if #t (begin (load "tests/escheme_test_suite2.scm") (display "  suite2 ") (perform-timed-run n))))
(test1 10)
(define (test2 n) (display-header "test2" n) (load "syntax-help.scm") (let ((double-reverse (lambda () (let ((p (syntax-read "syntax.scm"))) (if (not (equal? p (reverse (reverse p)))) (error "p != rev(rev(p))")))))) (let () (while (> n 0) (double-reverse) (set! n (dec n))))))
(test2 20)
(define (test3 n) (display-header "test3" n) (load "syntax-help.scm") (let ((help-fn (lambda (fn) (let ((matches (reverse (syntax-find fn)))) (if (not matches) (error "couldn't find" fn))))) (fns (quote (car cdr cons list vector lambda define set! access abs add-history append apply bound? call/cc ceiling char? close-port closure? code? compile complex? cond dec default-object? display eq? eval even? exit floor force gcd gc getenv get if inc integer? last-pair let letrec list? member min negative? not null? max memq number? odd? <= = * + open-append-file or output-port? pair? port? print procedure? promise? put quotient random rank read-char read remainder reverse round sequence set-car! setenv shift-left shift-right string-append string-fill! string->symbol substring symbol? symbol->string system the-environment truncate unsetenv vector-copy! vector? vector-length vector->list while write-char write zero?)))) (let () (while (> n 0) (map help-fn (reverse (append fns fns fns fns fns fns fns fns fns fns))) (set! n (dec n))))))
(test3 2)
(history)
(load "tests/test_driver1.scm")
(load "imager/imager.scm")
(load "compiler/compiler.scm")
(compiler-dump)
(load "imager/imager.scm")
(load "compiler/compiler.scm")
(compiler-dump)
(load "tests/test_driver1.scm")
11
2
(define (foo a b) (the-environment))
(define e1 (foo 1 2))
e1
(environment-bindings e1)
(environment-bindings nil)
(make-environment (quote ((x . 1) (y . 10))))
(%make-environment (quote ((x . 1) (y . 10))))
(%make-environment (quote ((x . 1) (y . 10)) nil))
(%make-environment (quote ((x . 1) (y . 10))) nil)
(define e2 (%make-environment (quote ((x . 1) (y . 10))) nil))
e2
e1
(environment? e1)
(environment? e2)
(define e2 (%make-environment (quote ((x . 1) (y . 10))) nil))
e2
(environment-bindings e2)
(history)
(load "tests/test_driver1.scm")
(decode-fun test3)
(load "tests/test_driver1.scm")
exit
(load "tests/test_driver1.scm")
